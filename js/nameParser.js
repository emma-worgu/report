// https://github.com/mklaber/node-another-name-parser
// USAGE: NameParser('string');
!function () { "use strict"; var A = { isBlank: function (A) { return null == A || /^[\s\xa0]*$/.test(A) }, collapseWhitespace: function (A) { return A.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "") }, indexOf: function (A, E) { return _.isString(A) ? A.toUpperCase().indexOf(E.toUpperCase()) : _.findIndex(A, function (A) { return A.toUpperCase() === E.toUpperCase() }) }, count: function (A, E) { var N = 0, R = E.toUpperCase(); if (_.isString(A)) for (var n = A.toUpperCase(), e = n.indexOf(R); e >= 0;)N++, e = n.indexOf(R, e + 1); else N = _.filter(A, function (A) { return A.toUpperCase() === R }).length; return N }, contains: function (A, E) { return this.indexOf(A, E) > -1 }, compact: function (A) { return _.compact(A) } }, E = ["CCSP", "CPA", "DC", "DDS", "DMD", "DO", "DPM", "DVM", "ESQ", "ESTATE", "FAM", "FAMILY", "II", "III", "IV", "JR", "LUTCF", "MD", "OC", "OD", "PA", "PE", "PHD", "SJ", "SR", "V", "VI", "VP", "V", "I", "VI", "VII", "VIII", "CNP", "CPA", "DDS", "DMin", "DMA ", "DMus", "OD", "DO", "PharmD", "PhD", "PsyD", "DVM", "EI", "EIT", "Esq", "JD", "LLS", "LP", "LPN", "MD", "PE", "RA", "RLA", "RLS", "RN", "SE", "ESQUIRE"], N = ["AB", "AIRMAN", "AN", "AND", "BG", "BR", "BRIG", "BRIGADIER", "CADET", "CAPT", "CAPTAIN", "CMDR", "COL", "COLONEL", "COMMISSIONER", "COMMANDER", "CORPORAL", "CPL", "CPT", "DEP", "DEPUTY", "DOCTOR", "DR", "FATHER", "FR", "GEN", "GENERAL", "HON", "HONORABLE", "JDGE", "JUDGE", "LIEUTENANT", "LT", "LTCOL", "LTGEN", "MAJ", "MAJGEN", "MAJOR", "MASTER", "MISS", "MISTER", "MR", "MRMRS", "MRS", "MS", "PASTOR", "PFC", "PRES", "PRIVATE", "PROF", "PROFESSOR", "PVT", "RABBI", "REP", "REPRESENTATIVE", "REV", "REVEREND", "SEN", "SENATOR", "SGT", "SSGT", "SHERIFF", "SIR", "SISTER", "SM", "SN", "SRA", "SSGT"], R = ["ANA MARIA", "ANN MARIE", "ANNA MARIA", "ANNA MARIE", "ANNE MARIE", "BARBARA ANN", "BETH ANN", "BETTY ANN", "BETTY JEAN", "BETTY JO", "BILLIE JO", "CAROL ANN", "JO ANN", "JO ANNA", "JO ANNE", "JO ELLEN", "JOHN PAUL", "JOSE LUIS", "JUAN CARLOS", "JULIE ANN", "LA DONNA", "LA TOYA", "LA VERNE", "LE ROY", "LEE ANN", "LEIGH ANN", "LISA MARIE", "LORI ANN", "LOU ANN", "LU ANN", "MARIA DE", "MARIA DEL", "MARIA ELENA", "MARIA TERESA", "MARY ALICE", "MARY ANN", "MARY ANNE", "MARY BETH", "MARY ELIZABETH", "MARY ELLEN", "MARY FRANCES", "MARY GRACE", "MARY JANE", "MARY JEAN", "MARY JO", "MARY KAY", "MARY LEE", "MARY LOU", "MARY LOUISE", "MARY LYNN", "PATRICIA ANN", "ROSE ANN", "ROSE MARIE", "ROSE MARY", "RUTH ANN", "SAN JUANA", "SAN JUANITA", "SUE ANN", "WILLIE MAE"], n = ["AL", "BIN", "DA", "DE", "DEL", "DELLA", "DI", "DU", "EL", "IBN", "LA", "LE", "LO", "MAC", "MC", "PIETRO", "ST", "TER", "VAN", "VANDEN", "VERE", "VON"], e = function (N) { return A.contains(E, N.replace(/\./g, "")) }, t = function (E) { return A.contains(n, E.replace(/\./g, "")) }; window.NameParser = function (E) { var n = { prefix: null, first: null, middle: null, last: null, suffix: null, original: E }; if (A.isBlank(E)) return n; if (E = (E = E.replace(/\s*\(.+\)\s*/g, " ")).replace(/\s*".+"\s*/g, " "), E = A.collapseWhitespace(E), 1 === A.count(E, ",")) { var r = E.split(","), i = r[1].trim(); e(i) ? (n.suffix = i, E = r[0].trim()) : E = r[1].trim() + " " + r[0].trim() } for (var I, M, L = E.split(/\s+/), s = L.length, S = 0; S < s;)I = L[S], M = I, A.contains(N, M.replace(/\./g, "")) ? (n.prefix = A.isBlank(n.prefix) ? I : n.prefix + " " + I, L[S] = null) : e(I) && (n.suffix = A.isBlank(n.suffix) ? I : n.suffix + " " + I, L[S] = null), S++; S = 0; var O, a, l, D; for (O = (s = (L = A.compact(L)).length) > 2 && (l = L[0], D = L[1], A.contains(R, l + " " + D)), a = s > 2 && t(L[s - 2]); S < s;)I = L[S], 0 === S || 1 === S && O ? n.first = 0 === S ? I : n.first + " " + I : (!a || S !== s - 1 && S !== s - 2) && (1 === S || 2 === S && O) ? s >= 3 && !O && !t(I) ? n.middle = I : s >= 4 && O ? n.middle = I : n.last = I : n.last = A.isBlank(n.last) ? I : n.last + " " + I, S++; return n } }();
